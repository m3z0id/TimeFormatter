plugins {
    id 'fabric-loom' version '1.11-SNAPSHOT'
}

def MAVEN_GROUP = "com.m3z0id"
def MINECRAFT_VERSION = project.hasProperty('mc') ? project.property("mc") as String : "1.21.4"
def YARN = project.hasProperty('mc') ? project.property("yarn") as String : "1.21.4+build.8"
def MOD_VERSION = project.mod_version
def API_VERSION = project.hasProperty('api') ? project.property("api") as String : "0.119.3+1.21.4"
def FABRIC_LOADER = project.loader_version

version = "$MOD_VERSION+mc$MINECRAFT_VERSION"
group = MAVEN_GROUP

base {
    archivesName = project.archives_base_name
}

loom {
    splitEnvironmentSourceSets()

    mods {
        "timeformatter" {
            sourceSet sourceSets.client
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    minecraft "com.mojang:minecraft:${MINECRAFT_VERSION}"
    mappings "net.fabricmc:yarn:${YARN}:v2"
    modImplementation "net.fabricmc:fabric-loader:${FABRIC_LOADER}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${API_VERSION}"
    modImplementation include("net.kyori:adventure-platform-fabric:${ADVENTURE_FABRIC_API}")
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", MINECRAFT_VERSION
    inputs.property "loader_version", FABRIC_LOADER
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": MINECRAFT_VERSION,
                "loader_version": FABRIC_LOADER
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}
